uniform float4x4 ViewProj;

uniform texture2d image;
uniform float4 color;
uniform float mul_val;
uniform float add_val;

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

struct VertDataIn {
	float4 pos : POSITION;
	float uv  : TEXCOORD0;
};

struct VertDataOut {
	float4 pos : POSITION;
	float uv  : TEXCOORD0;
	float uv2 : TEXCOORD1;
};

VertDataOut VSDefault(VertDataIn v_in)
{
	VertDataOut vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	vert_out.uv2 = v_in.uv * mul_val + add_val;
	return vert_out;
}

float3 GetLuminance(float4 rgba)
{
	float red = rbga.r;
	float green = rgba.g;
	float blue = rgba.b;
	return (.299 * red) + (.587 * green) + (.114 * blue);
}

float4 PSAlphaMaskRGBA(VertDataOut v_in) : TARGET
{
	float4 rgba = image.Sample(textureSampler, v_in.uv) ;
	float4 intensity = dot(image.Sample(textureSampler, v_in.uv) * color ,float3(0.299,0.587,0.114));
	rgba *= color;
	rgba.a *= intensity;
	return rgba;
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSAlphaMaskRGBA(v_in);
	}
}

